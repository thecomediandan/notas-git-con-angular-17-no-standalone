import './polyfills.server.mjs';
import{A as D,D as w,H as A,K as y,a as b,b as f,c as E,d as C,e as r,f as s,g as F,h as q,i as t,j as i,k as l,l as m,m as e,n as k,o as x,p as u,q as P,y as M,z as L}from"./chunk-RZJWNFRA.mjs";var G=[],T=(()=>{let n=class n{};n.\u0275fac=function(c){return new(c||n)},n.\u0275mod=E({type:n}),n.\u0275inj=b({imports:[y.forRoot(G),y]});let o=n;return o})();var p=o=>({active:o}),S=(()=>{let n=class n{constructor(){this.activeLink=0}};n.\u0275fac=function(c){return new(c||n)},n.\u0275cmp=f({type:n,selectors:[["app-menu"]],decls:68,vars:81,consts:[[1,"container"],[1,"list-group"],["href","#","aria-disabled","true",1,"list-group-item","list-group-item-action","disabled","text-primary-emphasis"],[1,"bi","bi-gear-fill"],["href","#git-version",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-init",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-config",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-branch",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#gitignore",1,"list-group-item","list-group-item-action",3,"click","ngClass"],[1,"bi","bi-pass-fill"],["href","#git-switch",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-status",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-add",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-rm",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-commit",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-reset",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-reflog",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-checkout",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-log",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-remoto",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-clone",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-push",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-pull",1,"list-group-item","list-group-item-action",3,"click","ngClass"],[1,"bi","bi-paperclip"],["href","#git-stash",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-merge",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-rebase",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-restore",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-revert",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-diff",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-tag",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-fetch",1,"list-group-item","list-group-item-action",3,"click","ngClass"],["href","#git-switch-detach",1,"list-group-item","list-group-item-action",3,"click","ngClass"]],template:function(c,a){c&1&&(t(0,"div",0)(1,"div",1)(2,"a",2)(3,"h5"),l(4,"i",3),e(5,"\xA0Configuraciones"),i()(),t(6,"a",4),m("click",function(){return a.activeLink=1}),e(7," git --version "),i(),t(8,"a",5),m("click",function(){return a.activeLink=2}),e(9," git init "),i(),t(10,"a",6),m("click",function(){return a.activeLink=3}),e(11," git config "),i(),t(12,"a",7),m("click",function(){return a.activeLink=4}),e(13," git branch "),i(),t(14,"a",8),m("click",function(){return a.activeLink=5}),e(15," gitignore "),i(),t(16,"a",2)(17,"h5"),l(18,"i",9),e(19,"\xA0Operaciones b\xE1sicas"),i()(),t(20,"a",10),m("click",function(){return a.activeLink=6}),e(21," git switch "),i(),t(22,"a",11),m("click",function(){return a.activeLink=7}),e(23," git status "),i(),t(24,"a",12),m("click",function(){return a.activeLink=8}),e(25," git add "),i(),t(26,"a",13),m("click",function(){return a.activeLink=9}),e(27," git rm "),i(),t(28,"a",14),m("click",function(){return a.activeLink=10}),e(29," git commit "),i(),t(30,"a",15),m("click",function(){return a.activeLink=11}),e(31," git reset "),i(),t(32,"a",16),m("click",function(){return a.activeLink=12}),e(33," git reflog "),i(),t(34,"a",17),m("click",function(){return a.activeLink=13}),e(35," git checkout "),i(),t(36,"a",18),m("click",function(){return a.activeLink=14}),e(37," git log "),i(),t(38,"a",19),m("click",function(){return a.activeLink=15}),e(39," git remoto "),i(),t(40,"a",20),m("click",function(){return a.activeLink=16}),e(41," git clone "),i(),t(42,"a",21),m("click",function(){return a.activeLink=17}),e(43," git push "),i(),t(44,"a",22),m("click",function(){return a.activeLink=18}),e(45," git pull "),i(),t(46,"a",2)(47,"h5"),l(48,"i",23),e(49,"\xA0Casos pr\xE1cticos"),i()(),t(50,"a",24),m("click",function(){return a.activeLink=19}),e(51," git stash "),i(),t(52,"a",25),m("click",function(){return a.activeLink=20}),e(53," git merge "),i(),t(54,"a",26),m("click",function(){return a.activeLink=21}),e(55," git rebase "),i(),t(56,"a",27),m("click",function(){return a.activeLink=22}),e(57," git restore "),i(),t(58,"a",28),m("click",function(){return a.activeLink=23}),e(59," git revert "),i(),t(60,"a",29),m("click",function(){return a.activeLink=24}),e(61," git diff "),i(),t(62,"a",30),m("click",function(){return a.activeLink=25}),e(63," git tag "),i(),t(64,"a",31),m("click",function(){return a.activeLink=26}),e(65," git fetch "),i(),t(66,"a",32),m("click",function(){return a.activeLink=27}),e(67," git switch (rama virtual) "),i()()()),c&2&&(r(6),s("ngClass",u(27,p,a.activeLink===1)),r(2),s("ngClass",u(29,p,a.activeLink===2)),r(2),s("ngClass",u(31,p,a.activeLink===3)),r(2),s("ngClass",u(33,p,a.activeLink===4)),r(2),s("ngClass",u(35,p,a.activeLink===5)),r(6),s("ngClass",u(37,p,a.activeLink===6)),r(2),s("ngClass",u(39,p,a.activeLink===7)),r(2),s("ngClass",u(41,p,a.activeLink===8)),r(2),s("ngClass",u(43,p,a.activeLink===9)),r(2),s("ngClass",u(45,p,a.activeLink===10)),r(2),s("ngClass",u(47,p,a.activeLink===11)),r(2),s("ngClass",u(49,p,a.activeLink===12)),r(2),s("ngClass",u(51,p,a.activeLink===13)),r(2),s("ngClass",u(53,p,a.activeLink===14)),r(2),s("ngClass",u(55,p,a.activeLink===15)),r(2),s("ngClass",u(57,p,a.activeLink===16)),r(2),s("ngClass",u(59,p,a.activeLink===17)),r(2),s("ngClass",u(61,p,a.activeLink===18)),r(6),s("ngClass",u(63,p,a.activeLink===19)),r(2),s("ngClass",u(65,p,a.activeLink===20)),r(2),s("ngClass",u(67,p,a.activeLink===21)),r(2),s("ngClass",u(69,p,a.activeLink===22)),r(2),s("ngClass",u(71,p,a.activeLink===23)),r(2),s("ngClass",u(73,p,a.activeLink===24)),r(2),s("ngClass",u(75,p,a.activeLink===25)),r(2),s("ngClass",u(77,p,a.activeLink===26)),r(2),s("ngClass",u(79,p,a.activeLink===27)))},dependencies:[M]});let o=n;return o})();var O=(()=>{let n=class n{};n.\u0275fac=function(c){return new(c||n)},n.\u0275cmp=f({type:n,selectors:[["app-content"]],decls:476,vars:0,consts:[[1,"container","px-3"],["id","container-git-configuration"],[1,"bi","bi-gear-fill"],["id","git-version"],[1,"prettyprint","rounded-3","d-inline-block","p-3"],[1,"code"],["id","git-init"],["id","git-config"],["id","git-branch"],["id","gitignore"],["id","container-git-basic-operation"],[1,"bi","bi-pass-fill"],["id","git-switch"],["id","git-status"],["id","git-add"],["id","git-rm"],["id","git-commit"],["id","git-reset"],["id","git-reflog"],["id","git-checkout"],["id","git-log"],["href","http://devhints.io/git-log","target","_blank"],[1,"note"],["id","git-remote"],["id","git-clone"],["id","git-push"],["id","git-pull"],["id","container-git-practice-cases"],[1,"bi","bi-paperclip"],["id","git-stash"],["id","git-merge"],["id","git-rebase"],["id","git-restore"],["id","git-revert"],["id","git-diff"],["id","git-tag"],["id","git-fetch"],["id","git-switch-detach"]],template:function(c,a){c&1&&(t(0,"section",0)(1,"article",1)(2,"h2"),l(3,"i",2),e(4,"\xA0Configuraciones"),i(),t(5,"h3",3),e(6,"git --version"),i(),t(7,"p"),e(8," Para consultar que versi\xF3n de Git tenemos instalado podemos usar el comando "),t(9,"i"),e(10,"git --version o git -v"),i(),e(11,". "),i(),t(12,"pre",4)(13,"code",5),e(14,`git --version
// O tambi\xE9n
git -v`),i()(),t(15,"h3",6),e(16,"git init"),i(),t(17,"p"),e(18," Para iniciar un repositorio "),t(19,"b"),e(20,"git"),i(),e(21," utilizamos el c\xF3digo "),t(22,"i"),e(23,"git init"),i(),e(24," el cual nos habilita el directorio donde estamos como un repositorio local donde podremos hacer seguimiento de los cambios realizados en este ambiente. "),i(),t(25,"pre",4)(26,"code",5),e(27,"git init"),i()(),t(28,"h3"),e(29,"git init --bare (Repositorio Local)"),i(),t(30,"p"),e(31," Generalmente recurriremos a un repositorio en la nube, pero en caso de que por alguna circunstancia necesitemos crear un entorno local para compartir un repositorio en una red local, esto se puede hacer gracias a la bandera "),t(32,"i"),e(33,"--bare"),i(),e(34," al momento de iniciar un repositorio con "),t(35,"i"),e(36,"git init"),i(),e(37,". Esta configuraci\xF3n nos crear\xE1 un servidor local con todos los archivos de configuraci\xF3n necesarios, esta carpeta seleccionada no servir\xE1 para almacenar los archivos directamente porque es la que servir\xE1 de intermediario para la subida de los proyectos con otros usuarios. "),i(),t(38,"pre",4)(39,"code",5),e(40,"git init --bare"),i()(),t(41,"h3",7),e(42,"git config (credenciales)"),i(),t(43,"p"),e(44," Ahora tendr\xEDamos que configurar las credenciales con el cual nos identificaremos y registraremos al momento de realizar cambios al repositorio estas configuraciones las podemos modificar en "),t(45,"i"),e(46,"git config."),i()(),t(47,"pre",4)(48,"code",5),e(49,`git config --global user.name "[tu_nombre]"
git config --global user.email "[tu_correo]"`),i()(),t(50,"p"),e(51," Las configuraciones tambi\xE9n pueden ser locales a nivel repositorio, de todo el sistema a nivel de todos los usuarios del sistema operativo adem\xE1s del global que implica a todo el control del usuario del sistema operativo en uso. "),i(),t(52,"pre",4)(53,"code",5),e(54,`// Nivel local
git config --local user.name "[tu_nombre]"
git config --local user.email "[tu_correo]"
// Nivel Global
git config --global user.name "[tu_nombre]"
git config --global user.email "[tu_correo]"
// Nivel Sistema
git config --system user.name "[tu_nombre]"
git config --system user.email "[tu_correo]"`),i()(),t(55,"p"),e(56," Si quisieramos ver las configuraciones de usuario y email configurados en un repositorio, podemos usar las mismas instrucciones solo que omitiendo los valores de asignaci\xF3n. "),i(),t(57,"pre",4)(58,"code",5),e(59,`// Nivel local
git config --local user.name
git config --local user.email
// Nivel Global
git config --global user.name
git config --global user.email
// Nivel Sistema
git config --system user.name
git config --system user.email`),i()(),t(60,"h3"),e(61,"git config (autocrlf)"),i(),t(62,"p"),e(63," Tambien tendremos que tomar en cuenta el como el sistema operativo trata los saltos de l\xEDnea, el cual es distinto en Linux y Windows, esto debido a que Windows maneja un s\xEDmbolo oculto el cual no maneja Linux, no tomar en cuenta estos detalles puede causar errores al momento de desplegar las aplicaciones. "),i(),t(64,"pre",4)(65,"code",5),e(66,`// En Windows
git config --global core.autocrlf true  
// En Linux
git config --global core.autocrlf input`),i()(),t(67,"h3"),e(68,"git config (alias)"),i(),t(69,"p"),e(70," Habr\xE1 momentos en los que quisieramos acortar los comandos debido a que estos pueden ponerse muy largos de escribir y es necesario un atajo mas corto, para esto puede usarse los alias. Podremos poner a disposici\xF3n en alias a diferentes niveles del repositorio ("),t(71,"i"),e(72,"--local, --global y --system"),i(),e(73,"). "),i(),t(74,"pre",4)(75,"code",5),e(76,`// Creaci\xF3n de alias
git config --local alias.[nombre_alias] "[comando_git]"
// Uso del alias
git [nombre_alias]

// Ejemplo: Para el uso de una configuracion de un log
// Comando git de ejemplo:
git log --oneline --all --graph --pretty=format:"%C(auto)%h%d %s %C(black)%(bold)%cr"
// Creaci\xF3n del alias en modo global
git config --global alias.log_pretty "git log --oneline --all --graph --pretty=format:'%C(auto)%h%d %s %C(black)%(bold)%cr'"
// Uso del alias
git log_pretty`),i()(),t(77,"h3"),e(78,"git config (lista)"),i(),t(79,"p"),e(80," Podemos visualizar todas las configuraciones del repositorio con el comando "),t(81,"i"),e(82,"git config --list"),i(),e(83,", el cual tambien puede ser utilizado con "),t(84,"i"),e(85,"--local, --global y --system"),i(),e(86,", dependiendo del ambiente a consultar. "),i(),t(87,"pre",4)(88,"code",5),e(89,`git config --list
// Otras formas:
git config --local --list
git config --global --list
git config --system --list`),i()(),t(90,"h3",8),e(91,"git branch"),i(),t(92,"p"),e(93," Una cosa que debemos de configurar es la creaci\xF3n de ramas (branch), por defecto se nos crea una llamada "),t(94,"i"),e(95,"master"),i(),e(96," y nos encontramos posicionados en ella esto puede cambiar por convenciones diferentes por lo general se la suele renombrar por "),t(97,"i"),e(98,"main"),i(),e(99," el comando necesario para esto es "),t(100,"i"),e(101,"git branch"),i(),e(102,". En varios repositorios se suele manejar diferentes ramas para distintos prop\xF3sitos para despu\xE9s al final unirlas en una sola y esta rama principal suele ser la llamada "),t(103,"i"),e(104,"main"),i(),e(105," la cual no es de uso general porque esta es solo para unir las dem\xE1s ramas. "),i(),t(106,"pre",4)(107,"code",5),e(108,`// Para ver las ramas del repositorio
git branch
// Para crear una rama
git branch [nombre_rama]
// Para renombrar una rama
git branch -M [nombre_rama]
// Para eliminar una rama que no tiene conflictos
git branch -d [nombre_rama]
// Para forzar la eliminaci\xF3n de una rama
git branch -D [nombre_rama]`),i()(),t(109,"h3",9),e(110,".gitignore"),i(),t(111,"p"),e(112," Despu\xE9s de iniciado el repositorio tendremos que configurar el archivo "),t(113,"i"),e(114,".gitignore"),i(),e(115,", este archivo generalmente los FrameWorks los implementan autom\xE1ticamente, pero en caso de que no, tendremos que configurarlo. Este archivo se encarga de ignorar archivos para la zona de confirmaci\xF3n a no ser que se especifiquen expl\xEDcitamente. Este archivo generalmente se encuentra en la ra\xEDz del proyecto para Git lo detecte. "),i(),t(116,"pre",4)(117,"code",5),e(118,`// Este archivo puede ignorar directorios
carpeta/
// Contenido de carpetas
carpeta/*
//  Podemos excluir algunos archivos
!carpeta/archivo1.txt
// Agregar archivos expec\xEDficos
archivo2.txt
// Archivos concretos
*.txt
*.pdf
achivo_?.txt
// Y otros comodines...`),i()()(),t(119,"article",10)(120,"h2"),l(121,"i",11),e(122,"\xA0Operaciones b\xE1sicas"),i(),t(123,"h3",12),e(124,"git switch"),i(),t(125,"p"),e(126," Tambi\xE9n es importante la navegaci\xF3n entre ramas y en este caso existen dos maneras muy comunes, una manera muy conocida es usando "),t(127,"i"),e(128,"git checkout"),i(),e(129," pero este comando en realidad cubre otras necesidades por lo que deber\xEDamos usar "),t(130,"i"),e(131,"git switch"),i(),e(132," para este prop\xF3sito. "),i(),t(133,"pre",4)(134,"code",5),e(135,`// Operaciones con checkout
// Cambio de ramas
git checkout [nombre_rama]
// Para crear una rama y movernos en ella
git checkout -b [nombre_rama]
// Operaciones con switch
// Cambio de ramas
git switch [nombre_rama]
// Para crear una rama y movernos a ella
git switch -c [nombre_rama]`),i()(),t(136,"h3",13),e(137,"git status"),i(),t(138,"p"),e(139," Para consultar el estado del repositorio en cualquier momento podemos usar el comando de "),t(140,"i"),e(141,"git status"),i(),e(142,". Los estados posibles de los archivos del repositorio son los de archivos nuevos creados, modificados, eliminados. "),i(),t(143,"pre",4)(144,"code",5),e(145,`git status
// O tambi\xE9n una versi\xF3n resumida
git status -s
git status --short`),i()(),t(146,"h3",14),e(147,"git add"),i(),t(148,"p"),e(149," Para poder agregar los archivos a la zona de preparaci\xF3n, podemos usar "),t(150,"i"),e(151,"git add"),i(),e(152,". Esto no guarda los archivos directamente pero los pone en un \xE1rea donde estamos indicando que son los archivos vamos a confirmar. "),i(),t(153,"pre",4)(154,"code",5),e(155,`// Para agregar todos
git add .
// O agregar determinados archivos
git add [ruta_archivo] ...
// Para normalizar errores de Final de Linea (CRLF)
git add --renormalize .
git add --renormalize [ruta_archivo] ...`),i()(),t(156,"h3",15),e(157,"git rm"),i(),t(158,"p"),e(159," Para poder eliminar archivo de la zona de preparaci\xF3n por alguna raz\xF3n, podemos usar "),t(160,"i"),e(161,"git rm --cached"),i(),e(162,". No elimina el archivo pero si lo quita de la lista de archivos que ser\xE1n confirmados. "),i(),t(163,"pre",4)(164,"code",5),e(165,`// Para eliminar todos
git rm --cached .
// O agregar determinados archivos
git rm --cached [ruta_archivo] ...`),i()(),t(166,"p"),e(167," En caso de querer eliminar los archivos tanto en la zona de preparaci\xF3n como fisicamente del almacenamiento local omitimos la bandera "),t(168,"i"),e(169,"--cached"),i(),e(170,". "),i(),t(171,"pre",4)(172,"code",5),e(173,`// Para eliminar todos
git rm .
// O agregar determinados archivos
git rm [ruta_archivo] ...`),i()(),t(174,"h3",16),e(175,"git commit"),i(),t(176,"p"),e(177," Ahora para poder confirmar los cambios y estos se guarden en el repositorio tendremos que usar "),t(178,"i"),e(179,"git commit"),i(),e(180,". Esto confirma los archivos que estan en la zona de preparaci\xF3n. "),i(),t(181,"pre",4)(182,"code",5),e(183,`// Para introducir comentarios mediante el IDE.
git commit
// O agregar los comentarios directamente
git commit -m "[mensaje/comentario]"`),i()(),t(184,"p"),e(185," Si queremos confirmar directamente todos los archivos sin usar "),t(186,"i"),e(187,"git add"),i(),e(188," podemos usar una bandera que simplifica la instrucci\xF3n. "),i(),t(189,"pre",4)(190,"code",5),e(191,`// Para introducir comentarios mediante el IDE configurado
git commit -a
// O agregar los comentarios directamente
git commit -m "[mensaje/comentario]" -a`),i()(),t(192,"p"),e(193," En caso de sobre escribir el comentario o mensaje del \xFAltimo commit o confirmaci\xF3n podemos usar "),t(194,"i"),e(195,"git commit --amend"),i()(),t(196,"pre",4)(197,"code",5),e(198,`// Para introducir comentarios mediante el IDE configurado
git commit --amend
// O agregar los comentarios directamente
git commit --amend -m "[mensaje/comentario]"`),i()(),t(199,"h3",17),e(200,"git reset"),i(),t(201,"p"),e(202," En caso de la necesidad de deshacer commits, estos tienen una regla para ignorar los commits y es que se deshacer\xE1n los commits superior a la posici\xF3n del puntero HEAD que indica la posici\xF3n actual del ultimo commit o commit actual posicionado. Esto se puede indicar mediante el comando "),t(203,"i"),e(204,"git reset"),i(),e(205,". El comando tiene 3 tipos de tratamiento mas comunes para el reestablecimiento de un commit, que son: "),t(206,"i"),e(207,"--soft, --mixed y --hard"),i(),e(208,". "),t(209,"i"),e(210,"--soft"),i(),e(211,' "elimina" los commits arriba del commit seleccionado mediante el puntero HEAD y los mueve al \xE1rea de preparaci\xF3n restaurando los cambios realizados en el commit seleccionado. '),t(212,"i"),e(213,"--mixed"),i(),e(214,' "elimina" los commits arriba del commit seleccionado mediante el puntero HEAD y no los mueve al \xE1rea de preparaci\xF3n pero si aparecen modificados y listos para ser agregados al zona de preparaci\xF3n restaurando los cambios realizados en el commit seleccionado. '),t(215,"i"),e(216,"--hard"),i(),e(217,' "elimina" los commits arriba del commit seleccionado mediante el puntero HEAD ('),t(218,"b"),e(219,"puede ser HEAD, HEAD~1, HEAD~2, ... Que indica las posiciones con base al puntero HEAD"),i(),e(220,", en todos los casos) y no los mueve al \xE1rea de preparaci\xF3n ni aparecen modificados, son descartados en su totalidad restaurando los cambios realizados en el commit seleccionado. "),i(),t(221,"pre",4)(222,"code",5),e(223,`git reset --soft [hash_commit o HEAD~(N\xFAmero correspondiente al commit partiendo del ultimo como HEAD)]
git reset --mixed [hash_commit o HEAD~(N\xFAmero correspondiente al commit partiendo del ultimo como HEAD)]
git reset --hard [hash_commit o HEAD~(N\xFAmero correspondiente al commit partiendo del ultimo como HEAD)]`),i()(),t(224,"h3",18),e(225,"git reflog"),i(),t(226,"p"),e(227," En realidad las referencias a los commits no se eliminan solo se ignoran, eso abre la posibilidad de recuperar commits deshechos y se puede recuperar con la ayuda de los comandos "),t(228,"i"),e(229,"git reflog"),i(),e(230," y "),t(231,"i"),e(232,"git reset"),i(),e(233,". "),t(234,"i"),e(235,"git reflog"),i(),e(236," para recuperar la referencia hash del commit y restaurarlo con lo aprendido con "),t(237,"i"),e(238,"git reset [bandera] [hash_commit]"),i(),e(239,". "),i(),t(240,"pre",4)(241,"code",5),e(242,`// Todas las referencias de todas las ramas
git reflog
// Todas las referencias de una rama en especifico
git reflog [nombre_rama]
// Limpiar el reflog y entradas antiguas
git reflog expire`),i()(),t(243,"h3",19),e(244,"git checkout"),i(),t(245,"p"),e(246," Si se trata de recuperar el ultimo commit de un archivo, todos o archivos espec\xEDficos esto se puede gracias al comando "),t(247,"i"),e(248,"git checkout"),i(),e(249,". Con este comando recuperamos el estado de los archivos a los que estaban en el \xFAltimo commit realizado. Pero tambien puede ser usado para moverse entre los commits mediante sus hash (consultar "),t(250,"i"),e(251,"git log"),i(),e(252,"), crear ramas, crear ramas con un commit es espec\xEDfico (puede incluir nombres de tags, consultar "),t(253,"i"),e(254,"git tag"),i(),e(255,"). "),i(),t(256,"pre",4)(257,"code",5),e(258,`// Todos lo archivos, tomar en cuenta que no todos los archivos pueden pertencer al mismo commit
git checkout .
// Archivos espec\xEDficos
git checkout [archivo(s)] [...]
// Crear rama y moverse a ella
git checkout -b [nombre_rama]
// Crear rama con un commit o tag en espec\xEDfico
git checkout -b [nombre_rama] [hash del commit o nombre de tag]`),i()(),t(259,"h3",20),e(260,"git log"),i(),t(261,"p"),e(262," Si queremos ver los hist\xF3ricos de los "),t(263,"i"),e(264,"commits"),i(),e(265," podemos usar "),t(266,"i"),e(267,"git log"),i(),e(268,". Hay diversas maneras de ver los hist\xF3ricos con distintas banderas incluso configuraciones de externos en internet ("),t(269,"a",21),e(270,"devhints.io/git-log"),i(),e(271,") que encuentran diversas configuraciones dependendiendo las necesidades para mostrar el historial de cambios en el repositorio. "),i(),t(272,"pre",4)(273,"code",5),e(274,`// Para ver todos los cambios con su respectivo hash versi\xF3n estandar
git log
// Mostrar los n-ultimos commits
git log -n [n\xFAmero de los \xFAltimos commit a mostrar]
// Versi\xF3n resumida
git log --oneline
// Versi\xF3n detallada
git log -p
// Versi\xF3n gr\xE1fica usualmente usado en casos de "merge"
git log --graph
// Con configuraciones externas
git log --pretty="format:%h %s %ae"`),i()(),t(275,"p",22),e(276," En realidad las referencias a los commits no se eliminan solo se ignoran, eso abre la posibilidad de recuperar commits deshechos y se puede recuperar con la ayuda de los comandos "),t(277,"i"),e(278,"git reflog"),i(),e(279," y "),t(280,"i"),e(281,"git reset"),i(),e(282,". "),t(283,"i"),e(284,"git reflog"),i(),e(285," para recuperar la referencia hash del commit y restaurarlo con lo aprendido con "),t(286,"i"),e(287,"git reset [bandera] [hash_commit]"),i(),e(288,". "),i(),t(289,"h3",23),e(290,"git remote"),i(),t(291,"p"),e(292," Para conectar con un servidor sea local o remoto (por internet o nube) tendremos que conectar esta relacion entre nuestro repositorio local con el remoto mediante "),t(293,"i"),e(294,"git remote"),i(),e(295,". Esto se usa para poder guardar el historico de nuestros commits y compartirlos con los usuarios que tengan acceso a este servidor sea local o remoto. "),i(),t(296,"pre",4)(297,"code",5),e(298,`// Para ver los nombres de los servidores
git remote
// Ver mas espec\xEDfico los servidores
git remote -v
// Para agregar un servidor remoto
git remote add [nombre (generalmente origin)] [link SSH o HTTPS]
// Para agregar un servidor local
git remote add [nombre (generalmente origin)] [direcci\xF3n de la carpeta]
// Para renombrar el nombre del servidor
git remote rename [nombre_actual (generalmente origin)] [nuevo_nombre]
// Para cambiar la direcci\xF3n del servidor
git remote set-url [nombre_servidor] [nueva direcci\xF3n local o remota]`),i()(),t(299,"h3",24),e(300,"git clone"),i(),t(301,"p"),e(302," Para poder clonar o traer un repositorio remoto el que usualmente es compartido mediante una URL de conexi\xF3n HTTPS o SSH, utilizamos el comando "),t(303,"i"),e(304,"git clone"),i(),e(305,". Esto trae todo un proyecto donde nos brinden una direcci\xF3n para poder clonarlo y trabajar sobre el. Si no se especifica un directorio donde deseamos se haga la descarga por defecto esta se realiza donde se esta ubicado (./). Por defecto al clonar un repositorio se configura el servidor remoto llamado "),t(306,"i"),e(307,"origin"),i(),e(308,". "),i(),t(309,"pre",4)(310,"code",5),e(311,`// Para clonar un proyecto en su rama principal
git clone [url HTTPS o SSH] [*directorio donde deseamos haga la descarga]
// Para clonar un proyecto indicando que rama del proyecto queremos descargar
git clone --branch [nombre_rama] [url HTTPS o SSH] [*directorio donde deseamos haga la descarga]`),i()(),t(312,"h3",25),e(313,"git push"),i(),t(314,"p"),e(315,' Para poder guardar los cambios confirmados ("commiteados") de los archivos de nuestro proyecto en un servidor sea local o remoto podemos usar el comando '),t(316,"i"),e(317,"git push"),i(),e(318,". Esto subir\xE1 el historial de cambios de los archivos confirmados. "),i(),t(319,"pre",4)(320,"code",5),e(321,`// Para poder guardar por defecto el servidor --set-upstream y usar solo "git push" posteriormente
git push -u [nombre_servidor] [nombre_rama]
// Si se guardo por defecto el nombre del servidor y rama
git push
// Para forzar un push, generalmente no se usa porque puede compremeter el proyecto
git push --force [nombre_servidor] [nombre_rama]`),i()(),t(322,"h3",26),e(323,"git pull"),i(),t(324,"p"),e(325," Para poder traer los cambios de un servidor local o remoto podemos usar el comando "),t(326,"i"),e(327,"git pull"),i(),e(328,". Esto trae todos los cambios realizados en la ultima confirmaci\xF3n junto con el historial de cambios confirmados. "),i(),t(329,"pre",4)(330,"code",5),e(331,`// Si se habilito en algun momento --set-upstream o sis se configuro el nombre del servidor o rama por defecto
git pull
// En caso de ser mas espec\xEDficos sin haber una configuraci\xF3n por defecto
git pull [nombre_servidor] [nombre_rama]`),i()()(),t(332,"article",27)(333,"h2"),l(334,"i",28),e(335,"\xA0Casos pr\xE1cticos"),i(),t(336,"h3",29),e(337,"git stash"),i(),t(338,"p"),e(339," Habr\xE1 momentos en el que necesitemos guardar nuestros cambios momentaneamente en alg\xFAn lugar, por diversas razones, como por ejemplo guardarlo para conservar algunos cambios para posteriormente hacer un "),t(340,"i"),e(341,"git pull"),i(),e(342," y despues usar "),t(343,"i"),e(344,"git stash"),i(),e(345," con sus banderas correspondientes de recuperaci\xF3n del \xFAltimo cambio realizado o alg\xFAn otro que fue almacenado en esta zona de apilado para asi mantener actualizado el repositorio con algunos cambios a conservar. "),i(),t(346,"pre",4)(347,"code",5),e(348,`// Si queremos guardar los cambios no confirmados a la lista de stashes
git stash
// Si queremos guardar los cambios no confirmados a la lista de stashes con un nombre
git stash push -m "nombre_stash"
// Si queremos listar todos los cambios guardados en la pila
git stash list
// Si queremos recuperar los \xFAltimos cambios en la pila y eliminarlo de la lista
git stash pop
// Si queremos recuperar cambios espec\xEDficos en la pila y eliminarlo de la lista
git stash pop stash@{[n\xFAmero de cambio en la lista stash, 0 es el \xFAltimo cambio]}
// Si solo queremos eliminar el ultimo cambio guaradado en la pila de stash
git stash drop
// Si queremos eliminar un cambio espec\xEDfico de la pila
git stash drop stash@{[n\xFAmero de cambio en la lista stash, 0 es el \xFAltimo cambio]}
// Si queremos restaurar los \xFAltimos cambios sin eliminarlo de la lista
git stash apply 
// Si queremos restaurar cambios espec\xEDficos de la lista stash sin eliminarlo de la lista
git stash apply stash@{[n\xFAmero de cambio en la lista stash, 0 es el \xFAltimo cambio]}`),i()(),t(349,"h3",30),e(350,"git merge"),i(),t(351,"p"),e(352," Si por alguna raz\xF3n queremos unir ramas que en un caso particular y muy com\xFAn puede ser que queramos traer los cambios de otra rama a la rama "),t(353,"i"),e(354,"main"),i(),e(355," para tener cambios sincronizados en la rama "),t(356,"i"),e(357,"main"),i(),e(358," con los cambios de otra rama, entonces pdoemos usar el comando "),t(359,"i"),e(360,"git merge"),i(),e(361,". Para poder usarlo y tomando el ejemplo mencionado, tendremos que posicionarnos en la rama que queremos que se le adicione los cambios de la otra rama. En algunos casos suele haber conflictos con el "),t(362,"i"),e(363,"merge"),i(),e(364,", Git nos da la posibilidad de resolverlos para continuar con la fusi\xF3n. Para ver los cambios bajo el efecto de esta fusi\xF3n podemos ayudarnos del comando "),t(365,"i"),e(366,"git log --graph"),i(),e(367," y podremos notar que los commits de ambas ramas se mantienen y se notan bifurcadas de la uni\xF3n. "),i(),t(368,"pre",4)(369,"code",5),e(370,`git merge [nombre_otra_rama]
// En caso de haber solucionado conflictos "merge"
git merge --continue`),i()(),t(371,"h3",31),e(372,"git rebase"),i(),t(373,"p"),e(374," Si queremos una fusi\xF3n en el que se note el historial de commits limpia de manera lineal y no bifurcada como en el caso del uso del comando "),t(375,"i"),e(376,"git merge"),i(),e(377," podemos usar el comando "),t(378,"i"),e(379,"git rebase"),i(),e(380,". Este comando hace lo mismo que el comando "),t(381,"i"),e(382,"merge"),i(),e(383," con la difernecia de mantener un orden lineal en el historial de commits, esto porque aplica cada uno de los commits de la rama rebaseada en la del destino. "),i(),t(384,"pre",4)(385,"code",5),e(386,`git rebase [nombre_otra_rama]
// En caso de haber solucionado conflictos "rebase"
git rebase --continue`),i()(),t(387,"h3",32),e(388,"git restore"),i(),t(389,"p"),e(390," Puede haber situaciones en las que queramos deshacer cambios en los archivos en el proyecto que se encuentren modificados o en el estado de preparaci\xF3n (utilizando "),t(391,"i"),e(392,"git add"),i(),e(393,") para esto se usa este comando "),t(394,"i"),e(395,"git restore"),i(),e(396,". "),i(),t(397,"pre",4)(398,"code",5),e(399,`// Todos los archivos modificados
git restore .
// Archivos modificados espec\xEDficos
git restore [nombre_archivo] [...]
// Todos los archivos en el \xE1rea de preparaci\xF3n
git restore --staged .
// Archivos espec\xEDficos en el \xE1rea de preparaci\xF3n
git restore --staged [nombre_archivo] [...]`),i()(),t(400,"h3",33),e(401,"git revert"),i(),t(402,"p"),e(403," Puede tomarse como la continuaci\xF3n de casos del comando "),t(404,"i"),e(405,"git restore"),i(),e(406," en el caso en el que quiseramos aplicar un commit anterior o un cambio al que quisieramos retornar, en este caso podemos usar el comando "),t(407,"i"),e(408,"git revert"),i(),e(409,". No confundir con el uso que tiene "),t(410,"i"),e(411,"git reset"),i(),e(412," que mueve el puntero HEAD al commit especificado, en cambio "),t(413,"i"),e(414,"git revert"),i(),e(415," crea un nuevo commit deshaciendo los cambios actuales y aplicando los cambios del commit especificado (Se usa el c\xF3digo hash del commit, puede consultar "),t(416,"i"),e(417,"git log"),i(),e(418,"). "),i(),t(419,"pre",4)(420,"code",5),e(421,`// Deshace los cambios del \xFAltimo commit
git revert
// Deshace los cambios del commit especificado
// Nos pedir\xE1 introducir comentarios para el nuevo commit (salir del editor con ":x")
git revert [codigo_hash]`),i()(),t(422,"h3",34),e(423,"git diff"),i(),t(424,"p"),e(425," En caso de que quisieramos visualizar distintas diferencias entre commits podemos usar el comando "),t(426,"i"),e(427,"git diff"),i(),e(428,". Para usarlo correctamente como primer commit introducido este debe ser anterior al segundo en terminos de tiempo. "),t(429,"b"),e(430,"Las rutas de los commit no solo pueden ser los hashes de los commits tambien podriamos usar la nomenclatura con el puntero (HEAD, HEAD~1, HEAD~2, ...)."),i()(),t(431,"pre",4)(432,"code",5),e(433,`// Para ver los cambios realizados especificamente del ultimo commit
git diff
// Para comparar el commit especificado con el actual
git diff [hash_especificado]
// Versi\xF3n detallada
git diff [hash_commit_anterior] [hash_commit_posterior]
// Versi\xF3n que solo muestra los nombres de archivos con diferencias
git diff --name-only [hash_commit_anterior] [hash_commit_posterior]
// Versi\xF3n que solo muestra las lineas y palabras con diferencias
git diff --word-diff [hash_commit_anterior] [hash_commit_posterior]`),i()(),t(434,"h3",35),e(435,"git tag"),i(),t(436,"p"),e(437," Puede ser muy necesario manejar versiones de nuestros proyectos de manera literal para esto podemos usar el comnado "),t(438,"i"),e(439,"git tag"),i(),e(440,'. Generamos una versi\xF3n que es de valor para producci\xF3n indicando que tenemos una versi\xF3n funcional, que no es mas que tener un nombre para un commit en espec\xEDfico por ejemplo lo mas usual "v0.1.0". Para llenar el '),t(441,"i"),e(442,"tag"),i(),e(443," con un commit, tendremos que enviarlo atrav\xE9s de "),t(444,"i"),e(445,"git push"),i(),e(446,". "),i(),t(447,"pre",4)(448,"code",5),e(449,`// Para ver la lista de tags
git tag
// Para crear un tag
git tag -a [nombre_tag_version] -m "[mensaje/comentario del tag o version]"
// Para enviar los cambios al tag
git push [nombre_rama] [nombre_tag_version]`),i()(),t(450,"h3",36),e(451,"git fetch"),i(),t(452,"p"),e(453," En caso de querer ver que cambios traer\xEDa si quisieramos hacer un "),t(454,"i"),e(455,"git pull"),i(),e(456," a un repositorio para traer cambios, podriamos ver esta posibilidad con el comando "),t(457,"i"),e(458,"git fetch"),i(),e(459,". Este comando no realiza cambios al repositorio local, pero nos mostrar\xE1 como afectar\xEDa este cambio en el repositorio. "),i(),t(460,"pre",4)(461,"code",5),e(462,`// Si tenemos configurado el servidor y rama por defecto con --set-upstream
git fetch
// Fetch espec\xEDfico y completo
git fetch [nombre_servidor] [nombre_rama]`),i()(),t(463,"h3",37),e(464,"git switch (rama virtual)"),i(),t(465,"p"),e(466," En caso de que quisieramos probar una rama de un repositorio para ejecutar pruebas u otra necesidad podr\xEDamos crear una rama virtual de esa rama con "),t(467,"i"),e(468,"git switch"),i(),e(469," con su bandera "),t(470,"i"),e(471,"--detach"),i(),e(472,". Todo cambio realizado en esta rama no se guardar\xE1 a no ser que se cree una rama para guardar los cambios. "),i(),t(473,"pre",4)(474,"code",5),e(475,"git switch --detach [nombre_servidor]/[nombre_rama]"),i()()()())},styles:["h3[_ngcontent-%COMP%], .note[_ngcontent-%COMP%]{color:#0d6efd}pre[_ngcontent-%COMP%]{background-color:#d1d1cc;max-width:100%}"]});let o=n;return o})();var j=(()=>{let n=class n{constructor(){this.isVisible=!0}toggleVisibility(){this.isVisible=!this.isVisible}};n.\u0275fac=function(c){return new(c||n)},n.\u0275cmp=f({type:n,selectors:[["app-menu-mobile"]],decls:10,vars:1,consts:[["type","button",1,"button-menu-mobile","btn","btn-primary","d-lg-none","d-xl-none","d-xxl-none","d-md-block","d-sm-block",3,"click"],[1,"bi","bi-list-ol"],[1,"offcanvas-customized","text-bg-light","p-3",3,"hidden"],[1,"offcanvas-customized-header","d-flex","flex-row","flex-nowrap","justify-content-between"],["type","button",1,"btn","btn-light",3,"click"],[1,"bi","bi-x-lg"]],template:function(c,a){c&1&&(t(0,"button",0),m("click",function(){return a.toggleVisibility()}),l(1,"i",1),i(),t(2,"article",2)(3,"header",3)(4,"h5"),e(5,"Menu de Git"),i(),t(6,"button",4),m("click",function(){return a.toggleVisibility()}),l(7,"i",5),i()(),t(8,"section"),l(9,"app-menu"),i()()),c&2&&(r(2),s("hidden",a.isVisible))},dependencies:[S],styles:[".button-menu-mobile[_ngcontent-%COMP%]{position:fixed;bottom:2rem;right:2rem;opacity:.7}.offcanvas-customized[_ngcontent-%COMP%]{position:fixed;top:0;left:0;height:100svh;z-index:5000;display:flex;flex-direction:column;flex-wrap:nowrap;overflow-y:auto}"]});let o=n;return o})();var H=(()=>{let n=class n{};n.\u0275fac=function(c){return new(c||n)},n.\u0275cmp=f({type:n,selectors:[["app-footer"]],decls:43,vars:0,consts:[[1,"w-100","d-flex","flex-row","flex-wrap","justify-content-center","bg-primary","p-3","text-light","text-center"],[1,"footer-img","p-2"],["src","../../assets/img/Logotipo-light.png","alt","","srcset","",1,"w-100"],[1,"text-center","pt-3"],[1,"footer-notes","p-2"],[1,"d-flex","flex-row","flex-wrap","justify-content-evenly","pt-3"],["href","https://thecomediandan.github.io/Apuntes-de-Web/content/pag-html.html","role","button",1,"btn","btn-primary"],[1,"bi","bi-filetype-html","fs-2"],["href","https://thecomediandan.github.io/Apuntes-de-Web/content/pag-estilos.html","role","button",1,"btn","btn-primary"],[1,"bi","bi-filetype-css","fs-2"],["href","https://thecomediandan.github.io/Apuntes-de-Web/content/pag-javascript.html","role","button",1,"btn","btn-primary"],[1,"bi","bi-filetype-js","fs-2"],[1,"footer-index","p-2"],[1,"pt-3"],["href","#"],["href","#container-git-configuration"],["href","#container-git-basic-operation"],["href","#container-git-practice-cases"],[1,"footer-social","p-2"],[1,"d-flex","flex-row","flex-wrap","justify-content-center","pt-3"],["href","https://github.com/thecomediandan","role","button",1,"btn","btn-primary"],[1,"bi","bi-github","fs-2"],["href","https://twitter.com/DanielDanish1","role","button",1,"btn","btn-primary","mx-2"],[1,"bi","bi-twitter-x","fs-2"],["href","https://www.youtube.com/channel/UCE7zY6OODXkdP3YLZXeFLeg","role","button",1,"btn","btn-primary"],[1,"bi","bi-youtube","fs-2"],[1,"footer-page","w-100","bg-primary","py-3","text-light","text-center"]],template:function(c,a){c&1&&(t(0,"footer",0)(1,"div",1),l(2,"img",2),t(3,"p",3),e(4," Creando soluciones y ayuda tecnol\xF3gica para la sociedad en general. "),i()(),t(5,"div",4)(6,"h5"),e(7,"Otras notas"),i(),t(8,"div",5)(9,"a",6),l(10,"i",7),i(),t(11,"a",8),l(12,"i",9),i(),t(13,"a",10),l(14,"i",11),i()()(),t(15,"div",12)(16,"h5"),e(17,"Contenido"),i(),t(18,"ul",13)(19,"li")(20,"a",14),e(21,"Inicio"),i()(),t(22,"li")(23,"a",15),e(24,"Configuraciones"),i()(),t(25,"li")(26,"a",16),e(27,"Operaciones b\xE1sicas"),i()(),t(28,"li")(29,"a",17),e(30,"Casos pr\xE1cticos"),i()()()(),t(31,"div",18)(32,"h5"),e(33,"Redes sociales"),i(),t(34,"div",19)(35,"a",20),l(36,"i",21),i(),t(37,"a",22),l(38,"i",23),i(),t(39,"a",24),l(40,"i",25),i()()()(),t(41,"div",26),e(42,"DanDev 2024 | Creado por Daniel Quispe Kuno"),i())},styles:[".footer-index[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none;color:#fff}.footer-index[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{text-align:start}.footer-index[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding-top:.5rem}footer[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{width:271px}"]});let o=n;return o})();var W=(o,n)=>n.title,Y=()=>({title:"Explore the Docs",link:"https://angular.dev"}),R=()=>({title:"Learn with Tutorials",link:"https://angular.dev/tutorials"}),X=()=>({title:"CLI Docs",link:"https://angular.dev/tools/cli"}),Q=()=>({title:"Angular Language Service",link:"https://angular.dev/tools/language-service"}),Z=()=>({title:"Angular DevTools",link:"https://angular.dev/tools/devtools"}),J=(o,n,v,g,c)=>[o,n,v,g,c];function $(o,n){if(o&1&&(t(0,"li")(1,"a",42)(2,"span"),e(3),i()()()),o&2){let v=n.$implicit;r(),s("href",v.link,C),r(2),k(v.title)}}var _=(()=>{let n=class n{constructor(){this.title="Estos son mis Apuntes de Git :D"}};n.\u0275fac=function(c){return new(c||n)},n.\u0275cmp=f({type:n,selectors:[["app-root"]],decls:75,vars:12,consts:[[1,"navbar","navbar-expand-lg","bg-body-tertiary","col-lg-10","col-md-11","col-sm-12","col-12","m-auto","pt-3","fixed-top"],[1,"container-fluid"],[1,"navbar-brand","col-lg-2","col-md-2","col-sm-3","col-4"],["href","https://angular.io/","target","_blank"],["src","./../assets/angular-svg.svg"],["type","button","data-bs-toggle","collapse","data-bs-target","#navbarSupportedContent","aria-controls","navbarSupportedContent","aria-expanded","false","aria-label","Toggle navigation",1,"navbar-toggler"],[1,"navbar-toggler-icon"],["id","navbarSupportedContent",1,"collapse","navbar-collapse"],[1,"navbar-nav","me-auto","mb-2","mb-lg-0"],[1,"nav-item"],["href","#",1,"nav-link"],["href","#container-git-configuration",1,"nav-link"],["href","#container-git-basic-operation",1,"nav-link"],["href","#container-git-practice-cases",1,"nav-link"],[1,"nav-item","dropdown"],["href","#","role","button","data-bs-toggle","dropdown","aria-expanded","false",1,"nav-link","dropdown-toggle"],[1,"dropdown-menu"],[1,"dropdown-divider"],["href","https://angular.io/","target","_blank",1,"dropdown-item"],[1,"d-flex","col-lg-1","h3","justify-content-end"],["href","https://github.com/thecomediandan","aria-label","Github","target","_blank","rel","noopener",1,"px-2"],[1,"bi","bi-github"],["href","https://twitter.com/DanielDanish1","aria-label","Twitter","target","_blank","rel","noopener",1,"px-2"],[1,"bi","bi-twitter-x"],["href","https://www.youtube.com/channel/UCE7zY6OODXkdP3YLZXeFLeg","target","_blank","rel","noopener",1,"px-2"],[1,"bi","bi-youtube"],[1,"container","d-flex","flex-column","col-lg-10","col-md-11","col-sm-12","col-12","mx-auto",2,"padding-top","100px"],[1,"column"],[1,"container","my-3"],[1,"text-center"],[1,"row","justify-content-evenly","pt-4"],[1,"card-git","card-repository","column","col-lg-5","col-md-7","col-sm-10","col-10","m-2","rounded","text-light","p-3","d-flex","flex-column","justify-content-between",2,"height","13rem"],[1,"card-content"],[1,"card-content","d-flex","justify-content-center","align-item-center"],["href","https://git-scm.com/doc","target","_blank","role","button",1,"btn","btn-primary"],[1,"bi","bi-git"],[1,"card-github","card-repository","column","col-lg-5","col-md-7","col-sm-10","col-10","m-2","rounded","text-light","p-3","d-flex","flex-column","justify-content-between",2,"height","13rem"],["href","https://github.com","target","_blank","role","button",1,"btn","btn-primary"],[1,"container","w-lg-90","mt-5","mx-auto","d-flex","flex-row"],[1,"col-lg-4","d-lg-block","d-md-none","d-sm-none","d-none","sticky-top","overflow-y-auto",2,"top","100px","height","80svh"],[1,"col-lg-8","col-md-10","col-sm-12","col-12"],[1,"container","col-lg-11","mt-5","mx-auto"],["target","_blank","rel","noopener",1,"dropdown-item",3,"href"]],template:function(c,a){c&1&&(t(0,"nav",0)(1,"div",1)(2,"div",2)(3,"a",3),l(4,"img",4),i()(),t(5,"button",5),l(6,"span",6),i(),t(7,"div",7)(8,"ul",8)(9,"li",9)(10,"a",10),e(11,"Inicio"),i()(),t(12,"li",9)(13,"a",11),e(14,"Configuraciones"),i()(),t(15,"li",9)(16,"a",12),e(17,"Operaciones b\xE1sicas"),i()(),t(18,"li",9)(19,"a",13),e(20,"Casos pr\xE1cticos"),i()(),t(21,"li",14)(22,"a",15),e(23," Links de Angular "),i(),t(24,"ul",16),F(25,$,4,2,"li",null,W),t(27,"li"),l(28,"hr",17),i(),t(29,"li")(30,"a",18)(31,"span"),e(32,"Angular"),i()()()()()(),t(33,"div",19)(34,"a",20),l(35,"i",21),i(),t(36,"a",22),l(37,"i",23),i(),t(38,"a",24),l(39,"i",25),i()()()()(),t(40,"main",26)(41,"div",27)(42,"div",28)(43,"h1",29),e(44),i(),t(45,"p",29),e(46,"Configuraciones, apuntes y ayuda de problemas."),i()(),t(47,"div",30)(48,"div",31)(49,"div",32)(50,"h1"),e(51,"Git"),i(),t(52,"p"),e(53,"Manejador de versiones de software."),i()(),t(54,"div",33)(55,"a",34),l(56,"i",35),e(57,"\xA0 Documentaci\xF3n"),i()()(),t(58,"div",36)(59,"div",32)(60,"h1"),e(61,"Github"),i(),t(62,"p"),e(63,"Platafoma que usa Git para colaboraciones y repositorios remotos."),i()(),t(64,"div",33)(65,"a",37),l(66,"i",21),e(67,"\xA0 P\xE1gina GitHub"),i()()()()(),t(68,"div",38),l(69,"app-menu",39)(70,"app-content",40),i(),l(71,"app-menu-mobile"),i(),t(72,"footer",41),l(73,"app-footer"),i(),l(74,"router-outlet")),c&2&&(r(25),q(P(6,J,x(1,Y),x(2,R),x(3,X),x(4,Q),x(5,Z))),r(19),k(a.title))},dependencies:[A,S,O,j,H],styles:['h1[_ngcontent-%COMP%]{font-size:3.125rem;font-weight:500;line-height:100%;letter-spacing:-.125rem;margin:0}p[_ngcontent-%COMP%]{margin:0}.card-git[_ngcontent-%COMP%]{position:relative;background-image:url("./media/gitbanner-QDDFZYJJ.jpg");background-size:cover;background-position:start}.card-github[_ngcontent-%COMP%]{position:relative;background-image:url("./media/bannergithub-TYLECIEU.png");background-size:cover;background-position:center}.card-repository[_ngcontent-%COMP%]:before{content:"";position:absolute;top:0;left:0;width:100%;height:100%;border-radius:.5rem;background-color:#000000b3}.card-repository[_ngcontent-%COMP%]   .card-content[_ngcontent-%COMP%]{position:relative;z-index:3}']});let o=n;return o})();var N=(()=>{let n=class n{};n.\u0275fac=function(c){return new(c||n)},n.\u0275mod=E({type:n,bootstrap:[_]}),n.\u0275inj=b({providers:[D()],imports:[L,T]});let o=n;return o})();var B=(()=>{let n=class n{};n.\u0275fac=function(c){return new(c||n)},n.\u0275mod=E({type:n,bootstrap:[_]}),n.\u0275inj=b({imports:[N,w]});let o=n;return o})();export{B as a};
